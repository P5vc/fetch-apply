#!/usr/bin/env bash

set -euo pipefail
set -E


source /etc/fetchapply
cd ${fa_var_FA_ROOT}
source mo


fa_var_host=$(hostname)
fa_var_directory=""
fa_var_specificHostDirectory="No"

fa_var_pauseFile="${fa_var_FA_ROOT}/status/pause"
fa_var_lockFile="${fa_var_FA_ROOT}/status/lock"

fa_var_fetch="Yes"
fa_var_force="No"
fa_var_quiet="No"

fa_var_cmd=""

fa_var_initCompleted="No"


function fa_func_log
{
	fa_var_RED="\033[0;31m"
	fa_var_YELLOW="\033[0;33m"
	fa_var_CYAN="\033[0;36m"
	fa_var_GREEN="\033[0;32m"
	fa_var_NO_COLOR="\033[0m"

	fa_var_color=""

	if [ "$1" == "Error" ]
	then
		fa_var_color="$fa_var_RED"
	elif [ "$1" == "Warning" ]
	then
		fa_var_color="$fa_var_YELLOW"
	elif [ "$1" == "Info" ]
	then
		fa_var_color="$fa_var_CYAN"
	elif [ "$1" == "Success" ]
	then
		fa_var_color="$fa_var_GREEN"
	fi

	if [ "$fa_var_quiet" == "No" ]
	then
		echo -e "${fa_var_color}${2}${fa_var_NO_COLOR}"
		echo -e "$(date)\t${2}" >> $fa_var_LOG_FILE_PATH
	else
		if [ "$1" == "Error" ]
		then
			echo -e "$(date)\t${2}" >> $fa_var_LOG_FILE_PATH
		fi
	fi
}


function fa_func_logTrim
{
	fa_func_log Info "Inspecting Fetch Apply log..."

	if [ "$(cat $fa_var_LOG_FILE_PATH | grep -c '')" -gt "$fa_var_MAX_LOG_LENGTH" ]
	then
		if [ -e "${fa_var_LOG_FILE_PATH}.old" ]
		then
			rm ${fa_var_LOG_FILE_PATH}.old
		fi

		mv ${fa_var_LOG_FILE_PATH} ${fa_var_LOG_FILE_PATH}.old
		touch ${fa_var_LOG_FILE_PATH}

		fa_func_log Success "Fetch Apply log successfully trimmed..."
	fi
}


function fa_func_handleError
{
	local exitCode="$?"
	local failedCommand="${BASH_COMMAND:-unknown}"
	fa_func_log Error "The command '${failedCommand}' exited with exit code ${exitCode}."
}


function fa_func_handleExit
{
	if [ "$?" != "0" ]
	then
		fa_func_log Error "Failed.\nExiting..."
	fi
}


function fa_func_usage
{
cat <<EOF
fa - transparent server configuration and management

Usage:
  fa [options] [command]

Options:
  --help                   Show this help message
  --no-fetch               Don't fetch the inventory before running the command
  --force                  Run even if a pause or run lock is set
  --quieter                Suppress log messages

Commands:
  fetch                    Update local database by fetching from upstream
  recover                  Reset run lock file after a failure
  pause                    Set the pause lock to avoid periodic runs while debugging
  resume                   Resume periodic runs after a pause
  list-classes             List all classes
  list-modules             List all modules
  list-roles               List all roles
  clear-inits              Allow completed initializers to run once more
EOF
}


function fa_func_gitFetch
{
	if [ "$fa_var_fetch" == "Yes" ]
	then
		if [ -z "$(git -C ${fa_var_FA_ROOT}/operations status --porcelain)" ]
		then
			timeout 300 git -C ${fa_var_FA_ROOT}/operations pull > /dev/null
		else
			fa_func_log Error "Operations checkout is dirty."
			fa_func_log Info "Run with '--no-fetch' to bypass this check."
			exit 1
		fi
	else
		fa_func_log Info "Skipping fetch..."
	fi
}


function fa_func_identifyDirectory
{
	while read fa_var_line
	do if [ -n "$(echo "$fa_var_host" | grep "$fa_var_line")" ]
			then
				fa_var_directory="$fa_var_line"
			fi
	done < <(ls -1 ${fa_var_FA_ROOT}/operations/classes)

	if [ -z "$fa_var_directory" ]
	then
		fa_func_log Warning "No instructions found for this server.\nExiting..."
		exit 0
	else
		fa_func_log Success "A match was found with the class '${fa_var_directory}'..."
		fa_var_directory="${fa_var_FA_ROOT}/operations/classes/${fa_var_directory}"
	fi

	if [ -e "${fa_var_directory}/${fa_var_host}" ]
	then
		fa_func_log Success "A specific host directory was identified..."
		fa_var_directory="${fa_var_directory}/${fa_var_host}"
		fa_var_specificHostDirectory="Yes"
	fi
}


function fa_func_loadVariables
{
	source ${fa_var_FA_ROOT}/operations/variables
	if [ "$fa_var_specificHostDirectory" == "Yes" ]
	then
		source ${fa_var_directory}/../variables
	fi

	if [ -e "${fa_var_directory}/variables" ]
	then
		source ${fa_var_directory}/variables
	fi

	fa_func_log Success "Host-specific variables loaded..."
}


function fa_func_initializers
{
	if [ "$fa_var_specificHostDirectory" == "Yes" ]
	then
		if [ -e "${fa_var_directory}/initializers" ]
		then
			fa_var_initDirectory="${fa_var_directory}"
		else
			fa_var_initDirectory="${fa_var_directory}/.."
		fi
	fi

	while read fa_var_line
	do fa_var_initCompleted="No"
		while read fa_var_otherLine
		do if [ "$fa_var_otherLine" == "$fa_var_line" ]
			then
				fa_func_log Info "The '${fa_var_line}' initializer has already been completed, and will be skipped..."
				fa_var_initCompleted="Yes"
				break
			fi
		done < <(cat ${fa_var_FA_ROOT}/status/completedInits)

		if [ "$fa_var_initCompleted" == "No" ]
		then
			fa_func_log Info "Executing the '${fa_var_line}' initializer..."
			echo "$fa_var_line" >> ${fa_var_FA_ROOT}/status/completedInits

			if [ -e "${fa_var_FA_ROOT}/operations/initializers/${fa_var_line}" ]
			then
				source ${fa_var_FA_ROOT}/operations/initializers/${fa_var_line} 2>&1
			else
				fa_func_log Error "The initializer '${fa_var_line}' could not be found.\nExiting..."
				exit 1
			fi

			fa_func_log Success "Initializer (${fa_var_line}) successfully executed..."
		fi
	done < <(cat ${fa_var_initDirectory}/initializers)
}


function fa_func_roles
{
	if [ "$fa_var_specificHostDirectory" == "Yes" ]
	then
		if [ -e "${fa_var_directory}/roles" ]
		then
			fa_var_roleDirectory="${fa_var_directory}"
		else
			fa_var_roleDirectory="${fa_var_directory}/.."
		fi
	fi

	while read fa_var_line
	do fa_func_log Info "Applying role '${fa_var_line}'..."
		if [ ! -e ${fa_var_FA_ROOT}/operations/roles/${fa_var_line} ]
		then
			fa_func_log Error "The role '${fa_var_line}' could not be found.\nExiting..."
			exit 1
		fi

		while read fa_var_otherLine
		do fa_var_moduleDirectory="${fa_var_FA_ROOT}/operations/modules/${fa_var_otherLine}"
			if [ ! -e ${fa_var_moduleDirectory} ]
			then
				fa_func_log Error "The module '${fa_var_otherLine}' could not be found.\nExiting..."
				exit 1
			fi

			cd $fa_var_moduleDirectory

			fa_func_log Info "Applying module '${fa_var_otherLine}'..."

			if [ -e "variables" ]
			then
				source variables
			fi

			source apply 2>&1

			fa_func_log Success "Module '${fa_var_otherLine}' successfully applied..."

			cd ${fa_var_FA_ROOT}
		done < <(cat ${fa_var_FA_ROOT}/operations/roles/${fa_var_line})
	done < <(cat ${fa_var_roleDirectory}/roles)
}


function fa_func_modules
{
	if [ "$fa_var_specificHostDirectory" == "Yes" ]
	then
		if [ -e "${fa_var_directory}/modules" ]
		then
			fa_var_modDirectory="${fa_var_directory}"
		else
			fa_var_modDirectory="${fa_var_directory}/.."
		fi
	fi

	while read fa_var_line
	do fa_var_moduleDirectory="${fa_var_FA_ROOT}/operations/modules/${fa_var_line}"
		if [ ! -e ${fa_var_moduleDirectory} ]
		then
			fa_func_log Error "The module '${fa_var_line}' could not be found.\nExiting..."
			exit 1
		fi

		cd $fa_var_moduleDirectory

		fa_func_log Info "Applying module '${fa_var_line}'..."

		if [ -e "variables" ]
		then
			source variables
		fi

		source apply 2>&1

		fa_func_log Success "Module '${fa_var_line}' successfully applied..."

		cd ${fa_var_FA_ROOT}
	done < <(cat ${fa_var_modDirectory}/modules)
}



# Parse command-line arguments:
for fa_var_argument in "$@"
do
	if [ "$fa_var_argument" == "--help" ]
	then
		fa_func_usage
		exit 0
	elif [ "$fa_var_argument" == "--no-fetch" ]
	then
		fa_var_fetch="No"
	elif [ "$fa_var_argument" == "--force" ]
	then
		fa_var_force="Yes"
	elif [ "$fa_var_argument" == "--quieter" ]
	then
		fa_var_quiet="Yes"
	elif [ "$fa_var_argument" == "fetch" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "recover" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "pause" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "resume" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "list-classes" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "list-modules" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "list-roles" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "clear-inits" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	else
		fa_func_log Error "'${fa_var_argument}' is not a recognized option or command.\nRun 'fa --help' for proper usage instructions."
	fi
done


if [ "$fa_var_cmd" == "fetch" ]
then
	fa_func_gitFetch
elif [ "$fa_var_cmd" == "recover" ]
then
	rm $fa_var_lockFile
	fa_func_log Success "Lock file successfully removed..."
elif [ "$fa_var_cmd" == "pause" ]
then
	touch $fa_var_pauseFile
	fa_func_log Success "Fetch Apply successfully paused..."
elif [ "$fa_var_cmd" == "resume" ]
then
	rm $fa_var_pauseFile
	fa_func_log Success "Fetch Apply successfully resumed..."
elif [ "$fa_var_cmd" == "list-classes" ]
then
	ls -1 "${fa_var_FA_ROOT}/operations/classes"
elif [ "$fa_var_cmd" == "list-modules" ]
then
	ls -1 "${fa_var_FA_ROOT}/operations/modules"
elif [ "$fa_var_cmd" == "list-roles" ]
then
	ls -1 "${fa_var_FA_ROOT}/operations/roles"
elif [ "$fa_var_cmd" == "clear-inits" ]
then
	echo "" > ${fa_var_FA_ROOT}/status/completedInits
	fa_func_log Success "Completed initializers cache successfully cleared..."
elif [ "$fa_var_cmd" == "" ]
then
	if [ -e "$fa_var_lockFile" ]
	then
		if [ "$fa_var_force" == "No" ]
		then
			if [ "$fa_var_IGNORE_RUN_LOCKS" == "true" ]
			then
				fa_func_log Warning "Ignoring the lock file..."
			else
				fa_func_log Error "Lock file found. This means that an error occurred during\na previous execution. You may remove this lock file by\nrunning 'fa recover'.\nExiting..."
				exit 1
			fi
		fi
	fi

	if [ -e "$fa_var_pauseFile" ]
	then
		if [ "$fa_var_force" == "No" ]
		then
			fa_func_log Warning "Pause file found. This means that a hold has been manually\nplaced on execution. You may remove this pause file by\nrunning 'fa resume'.\nExiting..."
			exit 0
		fi
	fi


	cd ${fa_var_FA_ROOT}

	touch $fa_var_lockFile

	fa_func_logTrim
	fa_func_gitFetch

	trap fa_func_handleError ERR
	trap fa_func_handleExit EXIT

	fa_func_log Info "Detecting proper directory..."
	fa_func_identifyDirectory

	fa_func_log Info "Loading host-specific variables..."
	fa_func_loadVariables

	fa_func_log Info "Running Initializers..."
	fa_func_initializers

	fa_func_log Info "Applying Roles..."
	fa_func_roles

	fa_func_log Info "Applying Modules..."
	fa_func_modules

	rm $fa_var_lockFile

	fa_func_log Success "All done."
fi
