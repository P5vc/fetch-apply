#!/usr/bin/env bash

source /etc/fetchapply
source ${fa_var_FA_ROOT}/mo

if [ "$fa_var_IGNORE_ERRORS" == "true" ]
then
	set -uo pipefail
else
	set -euo pipefail
fi

set -E

cd ${fa_var_FA_ROOT}


fa_var_host=$(hostname)
fa_var_directories=""

fa_var_pauseFile="${fa_var_FA_ROOT}/status/pause"
fa_var_lockFile="${fa_var_FA_ROOT}/status/lock"

fa_var_force="No"
fa_var_quiet="No"
if [ "$fa_var_AUTOMATIC_FETCH" == "true" ]
then
	fa_var_fetch="Yes"
else
	fa_var_fetch="No"
fi

fa_var_cmd=""

fa_var_initCompleted="No"


function fa_func_log
{
	fa_var_RED="\033[0;31m"
	fa_var_YELLOW="\033[0;33m"
	fa_var_CYAN="\033[0;36m"
	fa_var_GREEN="\033[0;32m"
	fa_var_NO_COLOR="\033[0m"

	fa_var_color=""

	if [ "$1" == "Error" ]
	then
		fa_var_color="$fa_var_RED"
	elif [ "$1" == "Warning" ]
	then
		fa_var_color="$fa_var_YELLOW"
	elif [ "$1" == "Info" ]
	then
		fa_var_color="$fa_var_CYAN"
	elif [ "$1" == "Success" ]
	then
		fa_var_color="$fa_var_GREEN"
	fi

	if [ "$fa_var_quiet" == "No" ]
	then
		echo -e "${fa_var_color}${2}${fa_var_NO_COLOR}"
		echo -e "$(date)\t${2}" >> $fa_var_LOG_FILE_PATH
	else
		if [ "$1" == "Error" ]
		then
			echo -e "$(date)\t${2}" >> $fa_var_LOG_FILE_PATH
		fi
	fi
}


function fa_func_logTrim
{
	fa_func_log Info "Inspecting Fetch Apply log..."

	if [ "$(cat $fa_var_LOG_FILE_PATH | grep -c '')" -gt "$fa_var_MAX_LOG_LENGTH" ]
	then
		if [ -e "${fa_var_LOG_FILE_PATH}.old" ]
		then
			rm ${fa_var_LOG_FILE_PATH}.old
		fi

		mv ${fa_var_LOG_FILE_PATH} ${fa_var_LOG_FILE_PATH}.old
		touch ${fa_var_LOG_FILE_PATH}

		fa_func_log Success "Fetch Apply log successfully trimmed..."
	fi
}


function fa_func_handleError
{
	local exitCode="$?"
	local failedCommand="${BASH_COMMAND:-unknown}"
	fa_func_log Error "The command '${failedCommand}' exited with exit code ${exitCode}."
}


function fa_func_handleExit
{
	if [ "$?" != "0" ]
	then
		fa_func_log Error "Failed.\nExiting..."
	fi
}


function fa_func_usage
{
cat <<EOF
fa - transparent server configuration and management

Usage:
  fa [options] [command]

Options:
  --help                   Show this help message
  --no-fetch               Don't fetch the inventory before running the command
  --force                  Run even if a pause or run lock is set
  --quieter                Suppress log messages

Commands:
  fetch                    Update local operations repository by fetching from upstream
  recover                  Reset run lock file after a failure
  pause                    Set the pause lock to avoid periodic runs while debugging
  resume                   Resume periodic runs after a pause
  list-classes-to-run      List all classes applicable to the local system
  list-classes             List all classes
  list-modules             List all modules
  list-roles               List all roles
  clear-inits              Allow completed initializers to run once more
EOF
}


function fa_func_gitFetch
{
	if [ "$fa_var_fetch" == "Yes" ]
	then
		if [ "$fa_var_APPLY_ON_CHANGE" == "true" ]
		then
			fa_func_log Info "Looking for changes in remote operations repository..."
			timeout 300 git -C ${fa_var_FA_ROOT}/operations remote update > /dev/null

			if [ -z "$(git -C ${fa_var_FA_ROOT}/operations diff origin/master)" ]
			then
				fa_func_log Success "No changes detected. Exiting..."
				exit 0
			else
				fa_func_log Info "Changes detected. Continuing..."
			fi
		fi

		if [ -z "$(git -C ${fa_var_FA_ROOT}/operations status --porcelain)" ]
		then
			timeout 300 git -C ${fa_var_FA_ROOT}/operations pull > /dev/null
		else
			fa_func_log Error "Operations checkout is dirty."
			fa_func_log Info "Run with '--no-fetch' to bypass this check, or set fa_var_AUTOMATIC_FETCH=false\nin the Fetch Apply configuration file."
			exit 1
		fi
	else
		fa_func_log Info "Skipping fetch..."
	fi
}


function fa_func_identifyApplicableClasses
{
	for fa_var_line in ""$(ls -1 ${fa_var_FA_ROOT}/operations/classes | tr '\n' ' ')""
	do fa_var_line="$(echo $fa_var_line | tr -d '[:space:]')"

		if [ -z "$fa_var_line" ]
		then
			continue
		fi

		# Handle manual assignments:
		if [ -e "${fa_var_FA_ROOT}/operations/classes/${fa_var_line}/assignments" ]
		then
			fa_var_manually_set=false

			for fa_var_line2 in ""$(cat ${fa_var_FA_ROOT}/operations/classes/${fa_var_line}/assignments | tr '\n' ' ')""
			do fa_var_line2="$(echo $fa_var_line2 | tr -d '[:space:]')"

				if [ -z "$fa_var_line2" ]
				then
					continue
				fi

				if [ "$fa_var_line2" == "$fa_var_host" ]
				then
					fa_func_log Success "The class '${fa_var_line}' was manually assigned to this host..."
					fa_var_manually_set=true

					# Check for a host directory within the assigned class:
					if [ -e "${fa_var_FA_ROOT}/operations/classes/${fa_var_line}/${fa_var_host}" ]
					then
						fa_func_log Success "A specific host directory was identified within the '${fa_var_line}' class..."
						fa_var_directories="${fa_var_directories}${fa_var_FA_ROOT}/operations/classes/${fa_var_line}/${fa_var_host} "
					else
						fa_var_directories="${fa_var_directories}${fa_var_FA_ROOT}/operations/classes/${fa_var_line} "
					fi
				fi
			done

			if [ "$fa_var_manually_set" == "true" ]
			then
				continue
			fi
		fi

		# Handle automatic assignments:
		if [ "$fa_var_AUTOMATIC_CLASS_ASSIGNMENT" == "true" ]
		then
			if [ -n "$(echo $fa_var_host | grep "$fa_var_line")" ]
			then
				fa_func_log Success "A match was found with the class '${fa_var_line}'..."

				if [ -e "${fa_var_FA_ROOT}/operations/classes/${fa_var_line}/${fa_var_host}" ]
				then
					fa_func_log Success "A specific host directory was identified within the '${fa_var_line}' class..."
					fa_var_directories="${fa_var_directories}${fa_var_FA_ROOT}/operations/classes/${fa_var_line}/${fa_var_host} "
				else
					fa_var_directories="${fa_var_directories}${fa_var_FA_ROOT}/operations/classes/${fa_var_line} "
				fi
			fi
		fi
	done

	if [ -z "$fa_var_directories" ]
	then
		fa_func_log Warning "No applicable classes found for this server.\nExiting..."
		exit 0
	fi
}


function fa_func_loadVariables
{
	source ${fa_var_FA_ROOT}/operations/variables

	for fa_var_directory in $fa_var_directories
	do fa_var_directory="$(echo $fa_var_directory | tr -d '[:space:]')"

		if [ -z "$fa_var_directory" ]
		then
			continue
		fi

		if [ -e "${fa_var_directory}/variables" ]
		then
			source ${fa_var_directory}/variables
		fi

		# Check if this is a host or class directory:
		if [ -n "$(echo "$fa_var_directory" | grep -E "classes/[[:alnum:]:;\"\'\`|~,><.?_+=\!@#\$%^&*()\-]{1,}/$(basename $fa_var_directory)$")" ]
		then
			# This is a host directory
			if [ -e "${fa_var_directory}/../variables" ]
			then
				source ${fa_var_directory}/../variables
			fi
		fi
	done

	fa_func_log Success "Host-specific base variables loaded..."
}


function fa_func_initializers
{
	fa_var_initFileToUse=""

	for fa_var_line in $fa_var_directories
	do fa_var_line="$(echo $fa_var_line | tr -d '[:space:]')"

		if [ -z "$fa_var_line" ]
		then
			continue
		fi

		fa_var_initFileToUse="${fa_var_line}/initializers"

		# Check if this is a host or class directory:
		if [ -n "$(echo "$fa_var_line" | grep -E "classes/[[:alnum:]:;\"\'\`|~,><.?_+=\!@#\$%^&*()\-]{1,}/$(basename $fa_var_line)$")" ]
		then
			# This is a host directory
			if [ ! -e "${fa_var_line}/initializers" ]
			then
				fa_var_initFileToUse="${fa_var_line}/../initializers"
			fi
		fi

		for fa_var_line2 in ""$(cat $fa_var_initFileToUse | tr '\n' ' ')""
		do fa_var_line2="$(echo $fa_var_line2 | tr -d '[:space:]')"

			if [ -z "$fa_var_line2" ]
			then
				continue
			fi

			fa_var_initCompleted="No"

			for fa_var_line3 in ""$(cat ${fa_var_FA_ROOT}/status/completedInits | tr '\n' ' ')""
			do fa_var_line3="$(echo $fa_var_line3 | tr -d '[:space:]')"

				if [ -z "$fa_var_line3" ]
				then
					continue
				fi

				if [ "$fa_var_line2" == "$fa_var_line3" ]
				then
					fa_func_log Info "The '${fa_var_line2}' initializer has already been completed, and will be skipped..."
					fa_var_initCompleted="Yes"
					break
				fi
			done

			if [ "$fa_var_initCompleted" == "No" ]
			then
				fa_func_log Info "Executing the '${fa_var_line2}' initializer..."
				echo "$fa_var_line2" >> ${fa_var_FA_ROOT}/status/completedInits

				if [ -e "${fa_var_FA_ROOT}/operations/initializers/${fa_var_line2}" ]
				then
					source ${fa_var_FA_ROOT}/operations/initializers/${fa_var_line2} 2>&1
				else
					fa_func_log Error "The initializer '${fa_var_line2}' could not be found.\nExiting..."
					exit 1
				fi

			fa_func_log Success "Initializer (${fa_var_line}) successfully executed..."

			fi
		done
	done
}


function fa_func_roles
{
	fa_var_rolesFileToUse=""

	for fa_var_line in $fa_var_directories
	do fa_var_line="$(echo $fa_var_line | tr -d '[:space:]')"

		if [ -z "$fa_var_line" ]
		then
			continue
		fi

		fa_var_rolesFileToUse="${fa_var_line}/roles"

		# Check if this is a host or class directory:
		if [ -n "$(echo "$fa_var_line" | grep -E "classes/[[:alnum:]:;\"\'\`|~,><.?_+=\!@#\$%^&*()\-]{1,}/$(basename $fa_var_line)$")" ]
		then
			# This is a host directory
			if [ ! -e "${fa_var_line}/roles" ]
			then
				fa_var_rolesFileToUse="${fa_var_line}/../roles"
			fi
		fi

		for fa_var_line2 in ""$(cat $fa_var_rolesFileToUse | tr '\n' ' ')""
		do fa_var_line2="$(echo $fa_var_line2 | tr -d '[:space:]')"

			if [ -z "$fa_var_line2" ]
			then
				continue
			fi

			if [ -e ${fa_var_FA_ROOT}/operations/roles/${fa_var_line2} ]
			then
				fa_func_log Info "Applying role '${fa_var_line2}'..."

				for fa_var_line3 in ""$(cat ${fa_var_FA_ROOT}/operations/roles/${fa_var_line2} | tr '\n' ' ')""
				do fa_var_line3="$(echo $fa_var_line3 | tr -d '[:space:]')"

					if [ -z "$fa_var_line3" ]
					then
						continue
					fi

					fa_var_moduleDirectory="${fa_var_FA_ROOT}/operations/modules/${fa_var_line3}"
					if [ ! -e "${fa_var_moduleDirectory}" ]
					then
						fa_func_log Error "The module '${fa_var_line3}' could not be found.\nExiting..."
						exit 1
					fi

					cd $fa_var_moduleDirectory

					fa_func_log Info "Applying module '${fa_var_line3}'..."

					if [ -e "variables" ]
					then
						source variables
					fi

					source apply 2>&1

					fa_func_log Success "Module '${fa_var_line3}' successfully applied..."

					# Replace any module-specific variables that may have been set:
					fa_func_loadVariables

					cd ${fa_var_FA_ROOT}
				done
			else
				fa_func_log Error "The role '${fa_var_line2}' could not be found.\nExiting..."
				exit 1
			fi
		done
	done
}


function fa_func_modules
{
	fa_var_modulesFileToUse=""

	for fa_var_line in $fa_var_directories
	do fa_var_line="$(echo $fa_var_line | tr -d '[:space:]')"

		if [ -z "$fa_var_line" ]
		then
			continue
		fi

		fa_var_modulesFileToUse="${fa_var_line}/modules"

		# Check if this is a host or class directory:
		if [ -n "$(echo "$fa_var_line" | grep -E "classes/[[:alnum:]:;\"\'\`|~,><.?_+=\!@#\$%^&*()\-]{1,}/$(basename $fa_var_line)$")" ]
		then
			# This is a host directory
			if [ ! -e "${fa_var_line}/modules" ]
			then
				fa_var_modulesFileToUse="${fa_var_line}/../modules"
			fi
		fi

		for fa_var_line2 in ""$(cat $fa_var_modulesFileToUse | tr '\n' ' ')""
		do fa_var_line2="$(echo $fa_var_line2 | tr -d '[:space:]')"

			if [ -z "$fa_var_line2" ]
			then
				continue
			fi

			fa_var_moduleDirectory="${fa_var_FA_ROOT}/operations/modules/${fa_var_line2}"
			if [ ! -e "${fa_var_moduleDirectory}" ]
			then
				fa_func_log Error "The module '${fa_var_line2}' could not be found.\nExiting..."
				exit 1
			fi

			cd $fa_var_moduleDirectory

			fa_func_log Info "Applying module '${fa_var_line2}'..."

			if [ -e "variables" ]
			then
				source variables
			fi

			source apply 2>&1

			fa_func_log Success "Module '${fa_var_line2}' successfully applied..."

			# Replace any module-specific variables that may have been set:
			fa_func_loadVariables

			cd ${fa_var_FA_ROOT}
		done
	done
}



# Parse command-line arguments:
for fa_var_argument in "$@"
do
	if [ "$fa_var_argument" == "--help" ]
	then
		fa_func_usage
		exit 0
	elif [ "$fa_var_argument" == "--no-fetch" ]
	then
		fa_var_fetch="No"
	elif [ "$fa_var_argument" == "--force" ]
	then
		fa_var_force="Yes"
	elif [ "$fa_var_argument" == "--quieter" ]
	then
		fa_var_quiet="Yes"
	elif [ "$fa_var_argument" == "fetch" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "recover" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "pause" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "resume" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "list-classes-to-run" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "list-classes" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "list-modules" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "list-roles" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	elif [ "$fa_var_argument" == "clear-inits" ]
	then
		if [ -z "$fa_var_cmd" ]
		then
			fa_var_cmd="$fa_var_argument"
		else
			fa_func_log Error "Too many commands provided.\nRun 'fa --help' for proper usage instructions."
		fi
	else
		fa_func_log Error "'${fa_var_argument}' is not a recognized option or command.\nRun 'fa --help' for proper usage instructions."
	fi
done


if [ "$fa_var_cmd" == "fetch" ]
then
	fa_func_gitFetch
elif [ "$fa_var_cmd" == "recover" ]
then
	rm $fa_var_lockFile
	fa_func_log Success "Lock file successfully removed..."
elif [ "$fa_var_cmd" == "pause" ]
then
	touch $fa_var_pauseFile
	fa_func_log Success "Fetch Apply successfully paused..."
elif [ "$fa_var_cmd" == "resume" ]
then
	rm $fa_var_pauseFile
	fa_func_log Success "Fetch Apply successfully resumed..."
elif [ "$fa_var_cmd" == "list-classes-to-run" ]
then
	fa_func_identifyApplicableClasses
elif [ "$fa_var_cmd" == "list-classes" ]
then
	ls -1 "${fa_var_FA_ROOT}/operations/classes"
elif [ "$fa_var_cmd" == "list-modules" ]
then
	ls -1 "${fa_var_FA_ROOT}/operations/modules"
elif [ "$fa_var_cmd" == "list-roles" ]
then
	ls -1 "${fa_var_FA_ROOT}/operations/roles"
elif [ "$fa_var_cmd" == "clear-inits" ]
then
	echo "" > ${fa_var_FA_ROOT}/status/completedInits
	fa_func_log Success "Completed initializers cache successfully cleared..."
elif [ "$fa_var_cmd" == "" ]
then
	if [ -e "$fa_var_lockFile" ]
	then
		if [ "$fa_var_force" == "No" ]
		then
			if [ "$fa_var_IGNORE_ERRORS" == "true" ]
			then
				fa_func_log Warning "Ignoring the lock file..."
			else
				fa_func_log Error "Lock file found. This means that an error occurred during\na previous execution. You may remove this lock file by\nrunning 'fa recover'.\nExiting..."
				exit 1
			fi
		fi
	fi

	if [ -e "$fa_var_pauseFile" ]
	then
		if [ "$fa_var_force" == "No" ]
		then
			fa_func_log Warning "Pause file found. This means that a hold has been manually\nplaced on execution. You may remove this pause file by\nrunning 'fa resume'.\nExiting..."
			exit 0
		fi
	fi


	cd ${fa_var_FA_ROOT}

	touch $fa_var_lockFile

	fa_func_logTrim
	fa_func_gitFetch

	trap fa_func_handleError ERR
	trap fa_func_handleExit EXIT

	fa_func_log Info "Detecting applicable code..."
	fa_func_identifyApplicableClasses

	fa_func_log Info "Loading host-specific variables..."
	fa_func_loadVariables

	fa_func_log Info "Running Initializers..."
	fa_func_initializers

	fa_func_log Info "Applying Roles..."
	fa_func_roles

	fa_func_log Info "Applying Modules..."
	fa_func_modules

	rm $fa_var_lockFile

	fa_func_log Success "All done."
fi
